#from gRSS import CaptureFeeds
import sqlite3

# This should handle anything related to input/output for a
# sqlite3 database


class SQLite3IO(object):
    """ Anything related to SQLite3 IO """

    def __init__(self, path):
        self.path = path
        self.capture_feeds = CaptureFeeds(self.path)


    def make_table_names(self, RSS_link, create_these_tables):
        """ Make the table names for the sqlite3 database.
    
        Args:
            RSS_link: RSS_link from 'feeds_list.txt'
            create_these_tables: A list of table names to be created.

        Returns:
            The 'create_these_tables' list is returned with a table name
            appended to it.
        """
        pass


    def create_these_tables(self, current_feeds_list, previous_feeds_list):
        """ Table names for new tables are generated.

        Args:
            current_feeds_list: List of RSS_links inputted by the user.
            previous_feeds_list: List of RSS_links generated by the program
                                 to keep track of tables currently in the
                                 database.
        
        Returns:
            A list of table names for tables that do not currently
            exist in the databases are created.
        
        Raises:
            UserWarning: RSS links have not been added to 'feeds_list.txt'
            UserWarning: Blank entry found, can't make table_name

        """
        # This method should be in sqlite3_io or mongo_io. 
        




        
        # First, we need to know that the RSS links have been properly added.
        #if len(current_feeds_list) == 0:
        #    raise UserWarning("RSS links have not been added to"\
         #                     + " 'feeds_list.txt'")

        # Second, we can now generate a list of table names. 
        #create_these_tables = []
        #for RSS_link in current_feeds_list:
            # If there is nothing in previous_feeds_list then append names.
        #    if previous_feeds_list == False:
         #       self.make_table_names(RSS_link, create_these_tables)

            # If previous_feeds_list is not empty check RSS links against
            # previously used RSS links.
         #   elif RSS_link not in previous_feeds_list:
          #      self.make_table_names(RSS_link, create_these_tables)
            # When no new tables need to be added return False
           # else:
           #     pass

        # create no tables if they aren't needed
        #if len(create_these_tables) == 0:
        #    return False
       # else:
        #    return create_these_tables


    def do_tables_exist(self): 
        """ Checks to see if new tables should be created

        The real job of this is to probably set & reset
        previous_feeds_list.json which we haven't done yet. 

        Returns:
            A list of table names for tables that have not been created.
        """
        # We should read the relations table in the sqlite3 db for this method
        # this method belongs in sqlite3_io
        #
        # no more random json kicking around. 

    def match_names(self, query_name):
        """ Match SQL database table names to table names used for insert
        query """
        # This should also be in the sqlite3_io module. Here we're querying
        # the relations table.
        

    

    
        


